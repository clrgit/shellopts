
o Rename Spec to Ast
o Rename Interpreter to Generator
o Use pandoc: https://unix.stackexchange.com/a/375035
o User man page location: https://unix.stackexchange.com/a/90762
o Assigner methods for options
o Make opts[] point at the main object
    opts[].subcommand is the direct subcommand of main
o Make opts be the aggrated set of options in a subcommand
    opts.subcommand is the concatenated path of subcommands
o Make opts[:some_command] be the set of options for that subcommand (already done)
o Sub-command options can overshadow options of outer commands but it is an
  error to access them using opts. Use opts[] or opts[:some_command] instead

o Add a default argument to extract:
    def extract(range, *defaults)
    end

    extract(3..4, 'dbo')

o More strict parsing of option and command lines
o --option can't be escaped if on the start of a block line?
o Use require_relative
o In the following list is a command with a mandatory sub-command

  list.tables!
  list.uuids!

  It should be rendered as
    list tables|uuids

  and not as
    list tables
    list uuids

  and not as 
    list [tables|uuids]

o Replace -h with -? when -h is specified by the user (eg. as a shorthand for --host)
o Limit text width to -10 chars of what it is today (same as stackexchange width in characters)
o Fix formatting error in long arguments (see ms2pg)
o Macro that can be used in the SPEC for the program name (eg. <PROGRAM>)
o Ignore all text after ' # ' (doesn't conflict with option flag)
o Command aliases
o Add user-defined setions
o Add a SOURCE section with link to git repo
o Bullet-lists
o Allow a USAGE section (and NAME)
o Client-defined argument types
o Rename Expr -> ?
o Find clean(er) procedural object model
o Support for paging of help:
    begin 
      file = Tempfile.new("prick") 
      file.puts HELP.split("\n").map { |l| l.sub(/^  /, "") } 
      file.flush 
      system "less #{file.path}" 
    ensure 
      file.close 
    end 

+ Special handling of --help arguments so that '--help command' is possible
+ Allow assignment to options (this makes practical stuff easier)
+ Rename line and char to lineno and charno
+ Find source in code an adjust line number in error messages 
+ Add brackets to optional option arguments: '--all=FILE?' -> '--all[=FILE]'
+ Bold text output
+ Recursive format of commands
+ Rename Compiler -> Interpreter


OLD

o Fix that it is near unsable when the user doesn't do 'include ShellOpts'
o Subcommands can be parsed as well: 
    opts, args = Shellopts.process(OPTIONS, ARGV)
    ...
    opts, command = opts.process
    case command
      when ...
    end
o 'help' should list commands in declaration order
o 'help' should use all levels by default
o 'help' should always include top-level options (try setting levels: 10 and
  see top-level options are gone
o A ShellOpts#shift command that makes it possible for Array#expect to emit
  relevant error messages

+ Somehow escape comments where a line starts with an option name
+ Parse and check enumeration arguments ('--debug=tokens|ast|idr|...')
