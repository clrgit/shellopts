#!/usr/bin/env ruby

$LOAD_PATH.unshift "#{Dir.getwd}/lib"

require 'shellopts'

spec = %(
  cmd1!
    This is some text 1

    cmd11!
      This is some more text 11

    cmd12!
      This is some more text 12
      
      cmd121!
        Even more text 121

  cmd2!
    This is some text 2
  cmd2.cmd21!
    This is some text 221
  cmd2.cmd22.cmd221!
    This is some text 222221
)


spec = %(
  cmd1!
    cmd2!

  cmd1.cmd2!
)

spec = %(
  -a -b @ -a and -b brief
  -c @ -c brief
    Describes -a, -b, and -c

  -d 
    @ -d brief
    Describes -d

  cmd1! -e @ cmd1 brief
  cmd1_alias! --special-option
    @default cmd1 brief

    Command description

    cmd11! -f
      Some text

      @ cmd11 brief

      Some more text

      -g -h #@ grief
      -i
        Describes -g, -h, and -i

      -j=FILE
        Describes -j

      Finally
)

# TODO: Option parsing
#spec = %(
# -f=FILE @ own brief
# -s,str=FILE @ another brief
# -g=FILE -t,txt=FILE @ shared brief
#   shared doc
#)

#spec = %(
# -a 
# 
# -b -c # Shares brief and doc
#
# -d,e # Aliases
#
# -f # Shares doc and brief
# -g
#
# -h -i @subgroup-brief
# -j @option-brief
# -k 
#   @group-brief
#)
  
  

lexer = ShellOpts::Lexer.new("main", spec)
tokens = lexer.lex
#pp tokens

puts
parser = ShellOpts::Parser.new(tokens)
spec = parser.parse
spec.dump
puts

analyzer = ShellOpts::Analyzer.new(spec)
grammar, doc = analyzer.analyze

grammar.dump

exit

puts
program.dump(format: :rspec)
#puts
#program.dump(format: :debug)

__END__




#SPEC = %(
# NAME
#   Text
#)

SPEC = %(
  SYNOPSIS
    Synopsis
    are on 
    seperate lines

  DESCRIPTION
    Paragraphs
    spans over 
    multiple lines
)

lexer = ShellOpts::Lexer.new("main", SPEC)
tokens = lexer.lex
pp tokens
#puts
parser = ShellOpts::Parser.new(tokens)
program = parser.parse
program.dump(format: :debug)










#puts "--------------------------------"
#puts SPEC
#puts
#program.dump(format: :short)
#puts
#program.dump(format: :rspec)

#puts
#puts ShellOpts::Spec::Node.descendants(this: true)
#ShellOpts::Spec::Node.dump_hierarchy

#ShellOpts::Spec::Formatter.format(program, format: :rspec)
#formatter.format
#program.dump(format: :rspec)
#parser.program.dump2





__END__


opts, args = ShellOpts.process(SPEC, ARGV, version: "--ver", version_number: "1.2.3", help: "-?,help")

verb "Verbose default"
(0..3).each { |i| verb i, "Verbose #{i}" }
mesg "Message"
notice "Notice"
#debug "Debug"


