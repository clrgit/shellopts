#!/usr/bin/env ruby

$LOAD_PATH.unshift "#{Dir.getwd}/lib"

#require 'shellopts'

require 'forward_to'
include ForwardTo

require 'constrain'
include Constrain

require './lib/shellopts/ext/case.rb'
require './lib/shellopts/ext/class.rb'

require './lib/shellopts.rb'
require './lib/shellopts/ext/array.rb'
require './lib/shellopts/line.rb'
require './lib/shellopts/token.rb'
require './lib/shellopts/spec.rb'
require './lib/shellopts/grammar.rb'
require './lib/shellopts/doc.rb'
require './lib/shellopts/lexer.rb'
require './lib/shellopts/parser.rb'

#include ShellOpts::Message
#include ShellOpts::Verbose
#include ShellOpts::Debug

#include ShellOpts::Messages
#p ShellOpts::Messages.is_included?

#SPEC = %(
# @ An initial brief
#
# -- AN ARG DESCR
#
# A 
# multiline
# description
#
# -a @brief option description
# -b -c @description of -b and -c
# -d
#   A description of the -a, -b, -c and -d options
#   bla.bla.bla
#   @a brief for both options
#
# command! -- CMDARG1 CMDARG2 @brief description of command
#   @a conflicting brief for the command
#   A command description
# 
#   -c
#     @brief description of the command option
#     An option for the command
#
#   --with --without @a brief that shouldn't be there
#     @an option group brief
#     This is an option group defined on one line
# All the way out here
#
# subcommand! -a -b @a subcommand and not much more
#
#)
# another_command!
#   -d
#     @ option -d brief
#     Option -d description 
#   -- ARGS HERE
#   @ brief here
#   Description here
#)

#SPEC = %(-a -b)

#SPEC = %(
# -a
# -b
#)

#SPEC = %(
# -a -b @brief
# 
# -c @brief
# -d
#   @brief
#
# -e -f @brief
# -g @brief2
# -h
#   @brief3
#
#   Here is some text
#   for the option 
#   group
#
# Here is some more text
# spread over 
# multiple lines
#
# --random-option
#
# And yet some more
#)



#SPEC = %(
# -a
# -b
#
# -c
#)

#SPEC = %(
# -a @brief
#)

#SPEC = %(
# -a @brief
# -b 
#   @brief
#)

#SPEC = %(
# cmd! -a @brief
# -b 
#   @brief
#)

# Problem
#   command --opt --opt arg arg @brief
#   --opt @brief
#   --opt
#     @brief

# -a
# -b
# -c
#   Option group
#)

#SPEC = %(
# cmd1! @brief
# cmd2! @brief
#)

#SPEC = %(
# cmd!  -- AN ARG -- ANOTHER ARG
#)
#SPEC = %(
# -a -b @brief1
# -c
#   @brief2
#)

SPEC = %(
  Text
    
    some_code()
)


lexer = ShellOpts::Lexer.new("main", SPEC)
tokens = lexer.lex
pp tokens
puts
parser = ShellOpts::Parser.new(tokens)
parser.parse
puts
p parser.program.children.size
puts parser.program.dn



exit


opts, args = ShellOpts.process(SPEC, ARGV, version: "--ver", version_number: "1.2.3", help: "-?,help")

verb "Verbose default"
(0..3).each { |i| verb i, "Verbose #{i}" }
mesg "Message"
notice "Notice"
#debug "Debug"


